import { ethers } from "hardhat";
import { VaultAttacker, VaultVictim } from "../typechain-types";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { expect } from "chai";

describe("Reentrance exploit", () => {
    let victim: VaultVictim;
    let attack: VaultAttacker;

    let goodUser: SignerWithAddress;
    let maliciousUser: SignerWithAddress;

    const attackAmount = ethers.utils.parseEther("1");
    const depositAmount = ethers.utils.parseEther("10");
    before(async () => {
        const signers = await ethers.getSigners();
        goodUser = signers[1];
        maliciousUser = signers[2];

        victim = await (await ethers.getContractFactory("VaultVictim")).deploy();
        attack = await (await ethers.getContractFactory("VaultAttacker")).connect(maliciousUser).deploy(victim.address, attackAmount);
    });

    it("should apply deposit from good user", async () => {
        await goodUser.sendTransaction({
            to: victim.address,
            value: depositAmount
        });
    });

    it("should apply deposit from attack contract", async () => {
        await attack.connect(maliciousUser).deposit({
            value: attackAmount
        });
    });

    it("should perform attack", async () => {
        await attack.connect(maliciousUser).attack();
    });

    it("should give all stolen money to malicious user", async () => {
        const tx = attack.withdraw();
        await expect(tx).to.changeEtherBalance(maliciousUser.address, depositAmount.add(attackAmount));
    });


});
