import { ethers } from "hardhat";
import { AuroraContract, AuroraContract__factory, AuroraExploit, AuroraExploit__factory } from "../typechain-types";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { expect } from "chai";
import { BigNumber } from "ethers";

describe("AuroraExploit", () => {

    let exploit: AuroraExploit;
    let victim: AuroraContract;
    let exploit__factory: AuroraExploit__factory;
    let victim__factory: AuroraContract__factory;

    let attacker: SignerWithAddress;
    before(async () => {
        exploit__factory = await ethers.getContractFactory("AuroraExploit");
        victim__factory = await ethers.getContractFactory("AuroraContract");

        exploit = await exploit__factory.deploy();
        victim = await victim__factory.deploy();

        attacker = (await ethers.getSigners())[0];
    });

    const exploitAmount = 10000;
    it("should emit event but actually give no native tokens", async () => {
        const balanceBefore = await attacker.getBalance();
        const tx = await exploit.exploit(victim.address, {
            value: exploitAmount
        });
        await tx.wait();
        const receipt = await exploit.provider.getTransactionReceipt(tx.hash);
        const numberInEvent = Number.parseInt(receipt.logs[0].data.substring(2 + 66), 16);
        expect(numberInEvent).eq(exploitAmount);
        const balanceAfter = await attacker.getBalance();
        const transactionCost = receipt.gasUsed.mul(receipt.effectiveGasPrice);
        expect(balanceBefore.sub(balanceAfter)).eq(transactionCost);
    });
});
