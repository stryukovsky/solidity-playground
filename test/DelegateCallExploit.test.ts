import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { DelegateCallAttack, DelegateCallLibrary, DelegateCallVictim } from "../typechain-types";
import { ethers } from "hardhat";
import { expect } from "chai";

describe("DelegateCallExploit", () => {
    let victim: DelegateCallVictim;
    let library: DelegateCallLibrary;
    let attack: DelegateCallAttack;

    let deployer: SignerWithAddress;
    let attacker: SignerWithAddress;

    before(async() => {
        const signers = await ethers.getSigners();
        deployer = signers[1];
        attacker = signers[2];

        library = await(await ethers.getContractFactory("DelegateCallLibrary")).connect(deployer).deploy();
        victim = await(await ethers.getContractFactory("DelegateCallVictim")).connect(deployer).deploy(library.address);
        attack = await(await ethers.getContractFactory("DelegateCallAttack")).connect(attacker).deploy(victim.address);
    });

    it("should have deployer as owner", async () => {
        const owner = await victim.owner();
        expect(owner).eq(deployer.address);
    });

    it("should perform attack", async () => {
        await attack.connect(attacker).attack();
    });
    
    it("should have attack contract as owner", async () => {
        const owner = await victim.owner();
        expect(owner).eq(attack.address);
    });
});
