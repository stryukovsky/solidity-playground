import { ethers } from "hardhat";
import { FlashLoan, FlashLoanAttacker, FlashLoanUser } from "../typechain-types";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { expect } from "chai";


describe("FlashLoanExploit", async () => {

    let victim: FlashLoan;
    let attackerContract: FlashLoanAttacker;
    let userContract: FlashLoanUser;

    let investor: SignerWithAddress;
    let attacker: SignerWithAddress;
    let user: SignerWithAddress;

    before(async () => {
        const signers = await ethers.getSigners();
        investor = signers[1];
        attacker = signers[2];
        user = signers[3];

        victim = await (await ethers.getContractFactory("FlashLoan")).deploy();
        attackerContract = await (await ethers.getContractFactory("FlashLoanAttacker")).connect(attacker).deploy(victim.address);
        userContract = await (await ethers.getContractFactory("FlashLoanUser")).connect(user).deploy(victim.address);
    });

    const invested = ethers.utils.parseEther("10");
    it("should give flash loan contract some ETH from investor", async () => {
        await victim.connect(investor).deposit({
            value: invested
        });
    });

    it("should perform a normal loan", async () => {
        await userContract.connect(user).takeLoan(100000);
    });

    it("should perform attack", async () => {
        await attackerContract.connect(attacker).attack(invested);
    });

    it("should withdraw money from attackerContract to attacker", async () => {
        const tx = attackerContract.connect(attacker).withdraw();
        await expect(tx).to.changeEtherBalance(attacker.address, invested);
    });
});
