//SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

import "./IFlashLoanReceiver.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract FlashLoan {

    using Address for address payable;

    mapping (address => uint) balances;

    bool _lock = false;

    function deposit() external payable { 
        balances[msg.sender] += msg.value;
    }

    function withdraw() external {
        uint256 amount = balances[msg.sender];
        balances[msg.sender] = 0;
        payable(msg.sender).sendValue(amount);
    }
 
    function loan(uint256 amount) external{
        uint256 balance = address(this).balance;
        require(balance >= amount, "LOAN_TOO_BIG");
        IFlashLoanReceiver(msg.sender).execute{value: amount}();
        require(address(this).balance >= balance, "NOT RETURNED");
    }

    receive() external payable {

    }
}
